// _id: 5ba7fd5501107e0a0bf9860c
// 12 bytes
// - 4 bytes: timestamp
// - 3 bytes: machine identifier
// - 2 bytes: process identifier
// - 3 bytes: counter

// 1 byte = 8 bits
// 2 ^ 8 = 256
// 2 ^ 24 = 16M

// Only way to have a duplicate is if ID
// is generated on the same machine, on
// the same processor, at the same second,
// and if 16M previous IDs were made so
// counter would overflow.

// Driver -> MongoDB
// ID generated by Driver and passed to MongoDB,
// so we don't need to wait for Mongo to generate
// it, which makes it highly scalable.

const mongoose = require('mongoose');

const id = new mongoose.Types.ObjectId();
console.log('Unique ID (12 bytes):\t', id);
console.log('Timestamp (4 bytes):\t', id.getTimestamp());
console.log('isValid?:\t\t', mongoose.Types.ObjectId.isValid(id));
