{"version":3,"sources":["components/Welcome.js","components/Sidebar/User.js","components/Sidebar/UserList.js","components/Sidebar/Sidebar.js","components/Messages/Message.js","components/Messages/MessageList.js","components/Messages/CreateMessage.js","components/Messages/Messages.js","App.js","serviceWorker.js","index.js"],"names":["Welcome","state","username","input","inputHandler","e","_this","setState","target","value","submitHandler","preventDefault","saveUsername","props","socket","emit","name","sessionStorage","setItem","id","logIn","react_default","a","createElement","className","onSubmit","this","onChange","placeholder","type","minLength","maxLength","required","React","Component","User","UserList","users","length","map","u","Sidebar_User","key","Sidebar","_this2","on","Sidebar_UserList","Message","concat","message","body","date","MessageList","messages","console","log","messageList","scrollTop","scrollHeight","_this3","ref","m","i","Messages_Message","CreateMessage","autoFocus","Messages","Messages_MessageList","Messages_CreateMessage","App","loggedIn","socketio","connect","Fragment","components_Sidebar_Sidebar","components_Messages_Messages","src_components_Welcome","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f5aa351b.chunk.js","sourcesContent":["import React from 'react';\nimport './Welcome.css';\n\n\nclass Welcome extends React.Component {\n  state = {\n    username: \"\",\n    input: \"\",\n  };\n\n  inputHandler = (e) => {\n    this.setState({ input: e.target.value });\n  };\n\n  submitHandler = (e) => {\n    e.preventDefault();\n    this.setState(\n      (state) => ({ username: state.input }),\n      this.saveUsername\n    );\n  };\n\n  saveUsername = () => {\n    this.props.socket.emit('setUsername', { name: this.state.username });\n    sessionStorage.setItem('username', this.state.username);\n    sessionStorage.setItem('socket', this.props.socket.id);\n    this.props.logIn();\n  };\n\n  render() {\n    return (\n      <section className=\"Welcome\">\n        <div className=\"modal\">\n          <h2>ch<span>app.</span></h2>\n          <p>\n            Welcome to my chat app... chapp!\n            <br/>\n            To begin, enter a username.\n          </p>\n          <form onSubmit={this.submitHandler}>\n            <input\n              onChange={this.inputHandler}\n              className=\"username\"\n              placeholder=\"Username\"\n              type=\"text\"\n              minLength=\"2\"\n              maxLength=\"25\"\n              required\n            />\n          </form>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default Welcome;\n","import React from 'react';\n\nconst User = (props) => (\n  <div className=\"User\">\n    {props.name}\n  </div>\n);\n\nexport default User\n","import React from 'react';\nimport User from './User';\n\nconst UserList = (props) => (\n  <section className=\"UserList\">\n    <h3>Connected Users - ({props.users.length})</h3>\n    {props.users.map((u) => (\n      <User key={u.id} name={u.name} />\n    ))}\n  </section>\n);\n\nexport default UserList;\n","import React from 'react';\nimport UserList from './UserList';\nimport './Sidebar.css';\n\n\nclass Sidebar extends React.Component {\n  state = {\n    users: [],\n  };\n\n  componentDidMount() {\n    if (!this.props.socket) return;\n    this.props.socket.on('usersChanged', (users) => {\n      this.setState({ users });\n    });\n  };\n\n  render() {\n    return (\n      <section className=\"Sidebar\">\n        <div className=\"heading\">\n          <h2>ch<span>app.</span></h2>\n          <div className=\"subtitle\">A realtime chat application</div>\n        </div>\n        \n        <UserList users={this.state.users} />\n      </section>\n    );\n  }\n}\n\nexport default Sidebar;\n","import React from 'react';\n\nconst Message = (props) => (\n  <div className={`Message ${props.message.socket === sessionStorage.socket ? \"me\" : \"\" }`}>\n    <div className=\"bubble\">\n      <p>{props.message.body}</p>\n      \n      <div className=\"meta\">\n        <span className=\"name\">{props.message.name}</span>\n        <span className=\"date\">{props.message.date}</span>\n      </div>\n    </div>\n  </div>\n);\n\nexport default Message;","import React from 'react';\nimport Message from './Message';\n\nclass MessageList extends React.Component {\n  state = {\n    messages: [],\n  };\n\n  componentDidMount() {\n    if (!this.props.socket) return;\n    this.props.socket.on('newMessage', (message) => {\n      console.log(message);\n      this.setState((state) => ({ messages: state.messages.concat(message) }));\n    });\n  };\n\n  componentDidUpdate() {\n    this.messageList.scrollTop = this.messageList.scrollHeight;\n  }\n\n  render() {\n    return (\n      <div className=\"MessageList\" ref={e => this.messageList = e}>\n        { this.state.messages.map((m, i) => (\n          <Message key={i} message={m} />\n        ))}\n      </div>\n    );\n  };\n}\n\nexport default MessageList;\n","import React from 'react';\n\nclass CreateMessage extends React.Component {\n  state = { message: \"\" };\n\n  inputHandler = (e) => {\n    this.setState({ message: e.target.value });\n  };\n\n  submitHandler = (e) => {\n    e.preventDefault();\n    this.props.socket.emit('sendMessage', { message: this.state.message });\n    this.setState({ message: \"\" });\n  };\n\n  render() {\n    return (\n      <div className=\"CreateMessage\">\n        <form onSubmit={this.submitHandler}>\n          <input \n            type=\"text\"\n            onChange={this.inputHandler}\n            placeholder=\"Enter message here...\"\n            value={this.state.message}\n            maxLength=\"2048\"\n            required\n            autoFocus\n          />\n        </form>\n      </div>\n    );\n  };\n}\n\nexport default CreateMessage;\n","import React from 'react';\nimport MessageList from './MessageList';\nimport CreateMessage from './CreateMessage';\nimport './Messages.css';\n\nconst Messages = (props) => (\n  <section className=\"Messages\">\n    <MessageList socket={props.socket} />\n    <CreateMessage socket={props.socket} />\n  </section>\n);\n\nexport default Messages;\n","import React, { Component } from 'react';\nimport socketio from 'socket.io-client';\nimport './App.css';\n\nimport Welcome from './components/Welcome';\nimport Sidebar from './components/Sidebar/Sidebar';\nimport Messages from './components/Messages/Messages';\n\nclass App extends Component {\n  state = {\n    socket: false,\n    loggedIn: false,\n  };\n\n  componentWillMount() {\n    this.setState({ socket: socketio.connect('http://23.23.42.188:5000') });\n  };\n\n  logIn = () => {\n    this.setState({ loggedIn: true });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        { !this.state.loggedIn \n          ? <Welcome socket={this.state.socket} logIn={this.logIn} />\n          : (\n            <React.Fragment>\n              <Sidebar socket={this.state.socket} />\n              <Messages socket={this.state.socket} />  \n            </React.Fragment>\n          )\n        }\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}